// <auto-generated />
using System;
using AspergillosisEPR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspergillosisEPR.Migrations.ExternalImportDb
{
    [DbContext(typeof(ExternalImportDbContext))]
    [Migration("20181120102402_CreatePatients")]
    partial class CreatePatients
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportForm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormCategoryId");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormCategoryId");

                    b.ToTable("CaseReportForm");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("CaseReportFormCategory");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormField", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormFieldTypeId");

                    b.Property<int?>("CaseReportFormId");

                    b.Property<int?>("CaseReportFormSectionId");

                    b.Property<string>("Label")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormFieldTypeId");

                    b.HasIndex("CaseReportFormId");

                    b.HasIndex("CaseReportFormSectionId");

                    b.ToTable("CaseReportFormField");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormFieldOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormFieldId");

                    b.Property<int>("CaseReportFormOptionChoiceId");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormFieldId");

                    b.HasIndex("CaseReportFormOptionChoiceId");

                    b.ToTable("CaseReportFormFieldOption");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormFieldType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("CaseReportFormFieldType");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormFormSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormId");

                    b.Property<int>("CaseReportFormSectionId");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormId");

                    b.HasIndex("CaseReportFormSectionId");

                    b.ToTable("CaseReportFormFormSection");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormOptionChoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormOptionGroupId");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormOptionGroupId");

                    b.ToTable("CaseReportFormOptionChoice");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormOptionGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("CaseReportFormOptionGroup");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormPatientResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormFieldId");

                    b.Property<int>("CaseReportFormId");

                    b.Property<int>("CaseReportFormResultId");

                    b.Property<DateTime?>("DateAnswer");

                    b.Property<decimal?>("NumericAnswer");

                    b.Property<int>("PatientId");

                    b.Property<string>("TextAnswer");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormFieldId");

                    b.HasIndex("CaseReportFormId");

                    b.HasIndex("CaseReportFormResultId");

                    b.HasIndex("PatientId");

                    b.ToTable("CaseReportFormPatientResult");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormPatientResultOptionChoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormOptionChoiceId");

                    b.Property<int>("CaseReportFormPatientResultId");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormPatientResultId");

                    b.ToTable("CaseReportFormPatientResultOptionChoice");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseReportFormCategoryId");

                    b.Property<int>("CaseReportFormId");

                    b.Property<DateTime>("DateTaken");

                    b.Property<int>("PatientId");

                    b.HasKey("ID");

                    b.HasIndex("CaseReportFormCategoryId");

                    b.HasIndex("CaseReportFormId");

                    b.HasIndex("PatientId");

                    b.ToTable("CaseReportFormResult");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("CaseReportFormSection");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.DiagnosisCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("DiagnosisCategory");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.DiagnosisType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortName");

                    b.HasKey("ID");

                    b.ToTable("DiagnosisType");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Drug", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.ExternalImportDb.Diagnosis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiagnosisCode");

                    b.Property<DateTime>("DiagnosisDate");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("text");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("RM2Number");

                    b.HasKey("ID");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.ImmunoglobulinType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ImmunoglobulinType");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int?>("MedicalTrialPrincipalInvestigatorId");

                    b.Property<int>("MedicalTrialStatusId");

                    b.Property<int>("MedicalTrialTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<string>("RECNumber");

                    b.Property<string>("RandDNumber");

                    b.HasKey("ID");

                    b.HasIndex("MedicalTrialPrincipalInvestigatorId");

                    b.HasIndex("MedicalTrialStatusId");

                    b.HasIndex("MedicalTrialTypeId");

                    b.ToTable("MedicalTrial");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrialPatientStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("MedicalTrialPatientStatus");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrialPrincipalInvestigator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("PersonTitleId");

                    b.HasKey("ID");

                    b.HasIndex("PersonTitleId");

                    b.ToTable("MedicalTrialPrincipalInvestigator");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrialStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("MedicalTrialStatus");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrialType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("MedicalTrialType");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DOB");

                    b.Property<DateTime?>("DateOfDeath");

                    b.Property<double>("DistanceFromWythenshawe");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("GenericNote");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("NhsNumber");

                    b.Property<int?>("PatientStatusId");

                    b.Property<string>("PostCode");

                    b.Property<string>("RM2Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("PatientStatusId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientAllergicIntoleranceItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllergyIntoleranceItemId");

                    b.Property<string>("AllergyIntoleranceItemType");

                    b.Property<string>("IntoleranceType")
                        .IsRequired();

                    b.Property<string>("Note")
                        .HasColumnType("ntext");

                    b.Property<int>("PatientId");

                    b.Property<string>("Severity");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergicIntoleranceItem");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientAllergicIntoleranceItemSideEffect", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PatientAllergicIntoleranceItemId");

                    b.Property<int>("SideEffectId");

                    b.HasKey("ID");

                    b.HasIndex("PatientAllergicIntoleranceItemId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("PatientAllergicIntoleranceItemSideEffect");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDiagnosis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("DiagnosisCategoryId");

                    b.Property<DateTime?>("DiagnosisDate");

                    b.Property<int>("DiagnosisTypeId");

                    b.Property<int>("PatientId");

                    b.HasKey("ID");

                    b.HasIndex("DiagnosisCategoryId");

                    b.HasIndex("DiagnosisTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDiagnosis");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDrug", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DrugId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("PatientId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ID");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDrug");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDrugLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComparisionCharacter");

                    b.Property<DateTime>("DateReceived");

                    b.Property<DateTime>("DateTaken");

                    b.Property<int>("DrugId");

                    b.Property<string>("LabNumber");

                    b.Property<int>("PatientId");

                    b.Property<decimal>("ResultValue");

                    b.Property<int>("UnitOfMeasurementId");

                    b.HasKey("ID");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("PatientDrugLevel");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDrugSideEffect", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PatientDrugId");

                    b.Property<int>("SideEffectId");

                    b.HasKey("ID");

                    b.HasIndex("PatientDrugId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("PatientDrugSideEffect");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientHaematology", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Albumin");

                    b.Property<DateTime>("DateTaken");

                    b.Property<double>("Hb");

                    b.Property<int>("PatientId");

                    b.Property<double>("WBC");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHaematology");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientICD10Diagnosis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiagnosisCode");

                    b.Property<DateTime>("DiagnosisDate");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("text");

                    b.Property<long>("OriginalImportId");

                    b.Property<int>("PatientId");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientICD10Diagnosis");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientImmunoglobulin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTaken");

                    b.Property<int>("ImmunoglobulinTypeId");

                    b.Property<int>("PatientId");

                    b.Property<string>("Range");

                    b.Property<string>("SampleId");

                    b.Property<decimal>("Value");

                    b.HasKey("ID");

                    b.HasIndex("ImmunoglobulinTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientImmunoglobulin");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientMeasurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTaken");

                    b.Property<decimal?>("Height");

                    b.Property<int>("PatientId");

                    b.Property<decimal?>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMeasurement");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientMedicalTrial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Consented");

                    b.Property<DateTime?>("ConsentedDate");

                    b.Property<DateTime>("IdentifiedDate");

                    b.Property<int>("MedicalTrialId");

                    b.Property<int>("PatientId");

                    b.Property<int>("PatientMedicalTrialStatusId");

                    b.Property<DateTime?>("RecruitedDate");

                    b.HasKey("ID");

                    b.HasIndex("MedicalTrialId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientMedicalTrialStatusId");

                    b.ToTable("PatientMedicalTrial");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientMRCScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTaken");

                    b.Property<int>("PatientId");

                    b.Property<string>("Score");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMRCScore");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientNACDates", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CPABand");

                    b.Property<DateTime?>("DateOfDiagnosis");

                    b.Property<DateTime?>("DefiniteStartOfDisease");

                    b.Property<DateTime>("FirstSeenAtNAC");

                    b.Property<DateTime?>("LastObservationPoint");

                    b.Property<int>("PatientId");

                    b.Property<DateTime?>("ProbableStartOfDisease");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNACDates");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientPulmonaryFunctionTest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateTaken");

                    b.Property<int>("PatientId");

                    b.Property<decimal>("PredictedValue");

                    b.Property<int>("PulmonaryFunctionTestId");

                    b.Property<decimal>("ResultValue");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.HasIndex("PulmonaryFunctionTestId");

                    b.ToTable("PatientPulmonaryFunctionTest");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientRadiologyFinding", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChestDistributionId");

                    b.Property<int?>("ChestLocationId");

                    b.Property<DateTime?>("DateTaken");

                    b.Property<int>("FindingId");

                    b.Property<int?>("GradeId");

                    b.Property<string>("Note")
                        .HasColumnType("ntext");

                    b.Property<int>("PatientId");

                    b.Property<int>("RadiologyTypeId");

                    b.Property<int?>("TreatmentResponseId");

                    b.HasKey("ID");

                    b.HasIndex("ChestDistributionId");

                    b.HasIndex("ChestLocationId");

                    b.HasIndex("FindingId");

                    b.HasIndex("GradeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RadiologyTypeId");

                    b.HasIndex("TreatmentResponseId");

                    b.ToTable("PatientRadiologyFinding");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientSmokingDrinkingStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AlcolholUnits");

                    b.Property<double?>("CigarettesPerDay");

                    b.Property<double?>("PacksPerYear");

                    b.Property<int>("PatientId");

                    b.Property<int>("SmokingStatusId");

                    b.Property<int?>("StartAge");

                    b.Property<int?>("StopAge");

                    b.HasKey("ID");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.HasIndex("SmokingStatusId");

                    b.ToTable("PatientSmokingDrinkingStatus");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("PatientStatus");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientSTGQuestionnaire", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActivityScore");

                    b.Property<DateTime>("DateTaken");

                    b.Property<decimal>("ImpactScore");

                    b.Property<string>("OriginalImportedId");

                    b.Property<int>("PatientId");

                    b.Property<decimal>("SymptomScore");

                    b.Property<decimal>("TotalScore");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientSTGQuestionnaire");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientSurgery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Note");

                    b.Property<int>("PatientId");

                    b.Property<int?>("SurgeryDate");

                    b.Property<int>("SurgeryId");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("PatientSurgery");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientTestResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTaken");

                    b.Property<int>("PatientId");

                    b.Property<string>("Range");

                    b.Property<string>("SampleId");

                    b.Property<int>("TestTypeId");

                    b.Property<int>("UnitOfMeasurementId");

                    b.Property<decimal>("Value");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("PatientTestResult");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.PersonTitle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("PersonTitle");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.PulmonaryFunctionTest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("ID");

                    b.ToTable("PulmonaryFunctionTest");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Radiology.ChestDistribution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ChestDistribution");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Radiology.ChestLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ChestLocation");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Radiology.Finding", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Finding");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Radiology.Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Radiology.RadiologyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("RadiologyType");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Radiology.TreatmentResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TreatmentResponse");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.SideEffect", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("SideEffect");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.SmokingStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("SmokingStatus");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Surgery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Surgery");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.TestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TestType");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.UnitOfMeasurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("UnitOfMeasurement");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportForm", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormCategory", "CaseReportFormCategory")
                        .WithMany()
                        .HasForeignKey("CaseReportFormCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormField", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormFieldType", "CaseReportFormFieldType")
                        .WithMany()
                        .HasForeignKey("CaseReportFormFieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportForm", "CaseReportForm")
                        .WithMany("Fields")
                        .HasForeignKey("CaseReportFormId");

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormSection", "CaseReportFormSection")
                        .WithMany("CaseReportFormResultFields")
                        .HasForeignKey("CaseReportFormSectionId");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormFieldOption", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormField", "Field")
                        .WithMany("Options")
                        .HasForeignKey("CaseReportFormFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormOptionChoice", "Option")
                        .WithMany()
                        .HasForeignKey("CaseReportFormOptionChoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormFormSection", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportForm")
                        .WithMany("Sections")
                        .HasForeignKey("CaseReportFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormSection", "Section")
                        .WithMany("FormSections")
                        .HasForeignKey("CaseReportFormSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormOptionChoice", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormOptionGroup", "CaseReportFormOptionGroup")
                        .WithMany("Choices")
                        .HasForeignKey("CaseReportFormOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormPatientResult", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormField", "Field")
                        .WithMany()
                        .HasForeignKey("CaseReportFormFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportForm", "FormResult")
                        .WithMany()
                        .HasForeignKey("CaseReportFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormResult")
                        .WithMany("Results")
                        .HasForeignKey("CaseReportFormResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormPatientResultOptionChoice", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormPatientResult")
                        .WithMany("Options")
                        .HasForeignKey("CaseReportFormPatientResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.CaseReportForms.CaseReportFormResult", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportFormCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CaseReportFormCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.CaseReportForms.CaseReportForm", "Form")
                        .WithMany()
                        .HasForeignKey("CaseReportFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("CaseReportFormResults")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrial", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.MedicalTrials.MedicalTrialPrincipalInvestigator", "PrincipalInvestigator")
                        .WithMany()
                        .HasForeignKey("MedicalTrialPrincipalInvestigatorId");

                    b.HasOne("AspergillosisEPR.Models.MedicalTrials.MedicalTrialStatus", "TrialStatus")
                        .WithMany()
                        .HasForeignKey("MedicalTrialStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.MedicalTrials.MedicalTrialType", "TrialType")
                        .WithMany()
                        .HasForeignKey("MedicalTrialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.MedicalTrials.MedicalTrialPrincipalInvestigator", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.PersonTitle", "PersonTitle")
                        .WithMany()
                        .HasForeignKey("PersonTitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patient", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patients.PatientStatus", "PatientStatus")
                        .WithMany()
                        .HasForeignKey("PatientStatusId");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientAllergicIntoleranceItem", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("PatientAllergicIntoleranceItems")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientAllergicIntoleranceItemSideEffect", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patients.PatientAllergicIntoleranceItem", "PatientAllergicIntoleranceItem")
                        .WithMany("SideEffects")
                        .HasForeignKey("PatientAllergicIntoleranceItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.SideEffect", "SideEffect")
                        .WithMany()
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDiagnosis", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.DiagnosisCategory", "DiagnosisCategory")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("DiagnosisCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.DiagnosisType", "DiagnosisType")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("DiagnosisTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDrug", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("PatientDrugs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDrugLevel", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("DrugLevels")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientDrugSideEffect", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patients.PatientDrug", "PatientDrug")
                        .WithMany("SideEffects")
                        .HasForeignKey("PatientDrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.SideEffect", "SideEffect")
                        .WithMany()
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientHaematology", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientHaematologies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientICD10Diagnosis", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientICD10Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientImmunoglobulin", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.ImmunoglobulinType", "ImmunoglobulinType")
                        .WithMany()
                        .HasForeignKey("ImmunoglobulinTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientImmunoglobulines")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientMeasurement", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientMeasurements")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientMedicalTrial", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.MedicalTrials.MedicalTrial", "MedicalTrial")
                        .WithMany()
                        .HasForeignKey("MedicalTrialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("MedicalTrials")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.MedicalTrials.MedicalTrialPatientStatus", "PatientMedicalTrialStatus")
                        .WithMany()
                        .HasForeignKey("PatientMedicalTrialStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientMRCScore", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientMRCScores")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientNACDates", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientNACDates")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientPulmonaryFunctionTest", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientPulmonaryFunctionTests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.PulmonaryFunctionTest", "PulmonaryFunctionTest")
                        .WithMany()
                        .HasForeignKey("PulmonaryFunctionTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientRadiologyFinding", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Radiology.ChestDistribution", "ChestDistribution")
                        .WithMany()
                        .HasForeignKey("ChestDistributionId");

                    b.HasOne("AspergillosisEPR.Models.Radiology.ChestLocation", "ChestLocation")
                        .WithMany()
                        .HasForeignKey("ChestLocationId");

                    b.HasOne("AspergillosisEPR.Models.Radiology.Finding", "Finding")
                        .WithMany()
                        .HasForeignKey("FindingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Radiology.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientRadiologyFindings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Radiology.RadiologyType", "RadiologyType")
                        .WithMany()
                        .HasForeignKey("RadiologyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Radiology.TreatmentResponse", "TreatmentResponse")
                        .WithMany()
                        .HasForeignKey("TreatmentResponseId");
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientSmokingDrinkingStatus", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithOne("PatientSmokingDrinkingStatus")
                        .HasForeignKey("AspergillosisEPR.Models.Patients.PatientSmokingDrinkingStatus", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.SmokingStatus", "SmokingStatus")
                        .WithMany()
                        .HasForeignKey("SmokingStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientSTGQuestionnaire", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("STGQuestionnaires")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientSurgery", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient")
                        .WithMany("PatientSurgeries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.Surgery", "Surgery")
                        .WithMany()
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspergillosisEPR.Models.Patients.PatientTestResult", b =>
                {
                    b.HasOne("AspergillosisEPR.Models.Patient", "Patient")
                        .WithMany("PatientTestResults")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.TestType", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspergillosisEPR.Models.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
